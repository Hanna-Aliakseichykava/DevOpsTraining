# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/centos-7.5"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  # Display the VirtualBox GUI when booting the machine
    vb.gui = true
    vb.memory = 1024
    vb.cpus = 4
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL


  # Tomcat instances (not more that 243)
  TOMCAT_COUNT = 5
  TOMCAT_NODES = Hash.new

  (1..TOMCAT_COUNT).each do |i|
    config.vm.define "tomcat#{i}" do |node|

      node.vm.hostname = "tomcat#{i}"
      # Create a private network, which allows host-only access to the machine using a specific IP.
      nodeIp = "192.168.0.#{10 + i}"
      node.vm.network "private_network", ip: nodeIp

      TOMCAT_NODES["#{node.vm.hostname}"] = nodeIp

      node.vm.provision "shell", inline: <<-SHELL

        echo "Install Tomcat #{i}"
        yum install java-1.8.0-openjdk -y
        yum install tomcat tomcat-webapps tomcat-admin-webapps -y
        systemctl enable tomcat
        
        echo 'Create web-app MyApp with index.html'
        [ ! -d "/usr/share/tomcat/webapps/MyApp" ] && mkdir /usr/share/tomcat/webapps/MyApp && echo "Folder MyApp has been created" || echo "Folder MyApp exists"
        export MY_APP_PATH=/usr/share/tomcat/webapps/MyApp/index.html

        echo 'Create or rewrite file index.html'
        > $MY_APP_PATH
        echo "<html>" >> $MY_APP_PATH
        echo "<head><title>Tomcat #{i}</title></head>" >> $MY_APP_PATH
        echo "<body style="color:green"><h1>Tomcat #{i}</h1></body>" >> $MY_APP_PATH
        echo "</html>" >> $MY_APP_PATH

        systemctl start tomcat

      SHELL

    end
  end


  # Apache HTTPD:
  # http://192.168.0.10:80/server-status
  # http://192.168.0.10:80/MyApp/

  config.vm.define "myloadbalancer" do |myloadbalancer|

    myloadbalancer.vm.hostname = "myloadbalancer"
    # Create a private network, which allows host-only access to the machine using a specific IP.
    myloadbalancer.vm.network "private_network", ip: "192.168.0.10"

    # Install Apache HTTPD and open firewall port
    myloadbalancer.vm.provision "shell", inline: <<-SHELL

      yum install httpd -y
      systemctl enable httpd
      systemctl start httpd

      yum install links -y

      firewall-cmd --zone=public --add-port=80/tcp --permanent
      firewall-cmd --reload
      systemctl stop firewalld

    SHELL


    # Apache HTTPD + Tomcats

    joinedTomcatNodeNames = TOMCAT_NODES.keys.join(",")

    # Create /etc/httpd/conf/workers.properties with content
    myloadbalancer.vm.provision "shell", inline: <<-SHELL

      cp /vagrant/mod_jk.so /etc/httpd/modules/

      export WORKERS_FILE_PATH=/etc/httpd/conf/workers.properties
      echo 'Create or rewrite file workers.properties'

      > $WORKERS_FILE_PATH

      echo "Debug: Tomcat Nodes: #{joinedTomcatNodeNames}"

      echo "worker.list=lb" >> $WORKERS_FILE_PATH
      echo "worker.lb.type=lb" >> $WORKERS_FILE_PATH
      echo "worker.lb.balance_workers=#{joinedTomcatNodeNames}" >> $WORKERS_FILE_PATH
    SHELL

    # Configure each worker in workers.properties
    TOMCAT_NODES.each do|name,ip|

      myloadbalancer.vm.provision "shell", inline: <<-SHELL

        export WORKERS_FILE_PATH=/etc/httpd/conf/workers.properties

        echo "Debug: Worker: #{name} #{ip}"
        echo "worker.#{name}.host=#{ip}" >> $WORKERS_FILE_PATH
        echo "worker.#{name}.port=8009" >> $WORKERS_FILE_PATH
        echo "worker.#{name}.type=ajp13" >> $WORKERS_FILE_PATH
      SHELL
    end

    # Edit /etc/httpd/conf/httpd.conf, 
    # Add to the end of the file
    myloadbalancer.vm.provision "shell", inline: <<-SHELL

      export HTTPD_CONF_FILE_PATH=/etc/httpd/conf/httpd.conf

      grep -q "mod_jk.so" $HTTPD_CONF_FILE_PATH; [ $? -eq 0 ] && export HTTPD_CONF_IS_UP_TO_DATE=true || export HTTPD_CONF_IS_UP_TO_DATE=false
      echo 'HTTPD conf is up to date: ' $HTTPD_CONF_IS_UP_TO_DATE

      $HTTPD_CONF_IS_UP_TO_DATE || echo 'LoadModule jk_module modules/mod_jk.so' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkWorkersFile conf/workers.properties' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkShmFile /tmp/shm' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkLogFile logs/mod_jk.log' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkLogLevel info' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkMount /MyApp* lb' >> $HTTPD_CONF_FILE_PATH

      $HTTPD_CONF_IS_UP_TO_DATE || echo 'ExtendedStatus on' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo '<Location /server-status>' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'SetHandler server-status' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'Order deny,allow' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'Allow from all' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo '</Location>' >> $HTTPD_CONF_FILE_PATH

    SHELL

    # Restart apache
    myloadbalancer.vm.provision "shell", inline: <<-SHELL
      systemctl restart httpd
    SHELL

  end


end
