
pipeline {

    agent {
        label ""
    }

   environment {
     
     APP_URL_1 = "http://${NODE_NAME}:8080/app/"

     APP_URL_2 = "http://${NODE_NAME}:8081/app/"
   }

    stages {

        stage('Clone sources') {
            steps {
                echo '..........................Clone or pull the repo..........................'
                git url: 'https://github.com/Hanna-Aliakseichykava/DevOpsTraining.git', branch: 'Module10'
            }
        }

         stage('Update Chef Cookbook') {
            steps {
                script {
                    
                    echo '..........................Update default attributes with new version..........................'

                    def basePath = "${env.WORKSPACE}/Module10/docker_run_book"
                    println "Debug: Path : ${basePath}"

                    File defaultAttributesFile = new File("${basePath}/attributes/default.rb")
                    defaultAttributesFile.write "node.default['APP_VERSION']          = '${VERSION}'"
 
                    println defaultAttributesFile.text


                    echo '..........................Update metadata with new version..........................'

                    File metadataFile = new File("${basePath}/metadata.rb")

                    def lines = metadataFile.readLines()

                    lines[lines.size()-1] = "version '${VERSION}'"

                    metadataFile.write lines[0] + "\n"
                    for (int i = 1; i < lines.size(); i++) {
                        metadataFile << lines[i] + "\n"
                    }

                    println metadataFile.text


                    echo '..........................Update dev environament with new version..........................'
                    File envFile = "${env.WORKSPACE}/Module10/environments/dev.json"

                    def lines = envFile.readLines()

                    envFile.write lines[0] + "\n"
                    for (int i = 1; i < lines.size(); i++) {
                        def line = lines[i]

                        if(line.contains("docker_run_book")) {
                            line = "        \"docker_run_book\": \"= ${VERSION}\""
                        }

                        metadataFile << line + "\n"
                    }

                    println envFile.text
                }  
                
            }
        }

        stage('Copy Cookbook to chef-repo directory') {
            steps {
                script {

                    echo '..........................Copy Cookbook to chef-repo directory..........................'
                    def pathToCookbook = "${env.WORKSPACE}/Module10/docker_run_book"
                    sh "sudo cp -ru ${pathToCookbook} /root/chef-repo/cookbooks/"

                    echo '..........................Copy Environments to chef-repo directory..........................'
                    def pathToEnvironmants = "${env.WORKSPACE}/Module10/environments"
                    sh "sudo cp -ru ${pathToEnvironmants} /root/chef-repo/"

                }
                
            }
        }

         stage('Upload updated cookbook to chef server') {
            steps {
                script {

                    echo '..........................Upload updated cookbook to chef server..........................'
                    sh "sudo cd /root/chef-repo/cookbooks/docker_run_book && sudo berks install && berks upload"
                    sh "sudo knife cookbook list -c /root/chef-repo/.chef/knife.rb"

                    echo '..........................Upload updated environment file to chef server..........................'
                    sh "sudo knife environment from file /root/chef-repo/environments/dev.json -c /root/chef-repo/.chef/knife.rb"
                }  
                
            }
        }

         stage('Start Client') {
            steps {
                script {

                        echo '..........................Start Client........................'
                        sh "sudo knife node run_list add ${NODE_NAME} \"recipe[docker_run_book]\" -c /root/chef-repo/.chef/knife.rb"
                        sh "sudo knife ssh 'name:${NODE_NAME}' 'sudo chef-client --once -o docker_run_book' -x vagrant -P 'vagrant' -c /root/chef-repo/.chef/knife.rb"


                        def versionCheckResultPort1 = sh (
                            script: "curl -X GET ${APP_URL_1} | grep ${VERSION} &>/dev/null && echo true || echo false",
                            returnStdout: true
                        ).trim()
                        println "Version Check - Port 1: [${versionCheckResultPort1}]"

                        def versionChekResultPort2 = sh (
                            script: "curl -X GET ${APP_URL_2} | grep ${VERSION} &>/dev/null && echo true || echo false",
                            returnStdout: true
                        ).trim()
                        println "Version Check - Port 2: [${versionChekResultPort2}]"

                        if(versionCheckResultPort1 != "true" && versionChekResultPort2 != "true") {
                            error("Build failed: version check doesn't pass")
                        }

                    }
                
            }
        }


        stage('Push to the repo') {
            steps {
                script {
                    
                    sh "git config --global user.email \"aleks.anna.ur@gmail.com\""
                    sh "git config --global user.name \"Anna\""
  
                    sh "git checkout Module10"
                    sh "git commit -am \"Version is updated to ${VERSION}\""

                    withCredentials([usernamePassword(credentialsId: 'gitcreds', usernameVariable: 'username', passwordVariable: 'password')]){
                          sh("git push http://$username:$password@github.com/Hanna-Aliakseichykava/DevOpsTraining Module10")
                    } 

                    sh "git checkout master"
                    sh "git pull"
                    sh "git tag -a vTask10${VERSION} -m \"New tag vTask10${VERSION}\""
                    sh 'git merge Module10'

                    withCredentials([usernamePassword(credentialsId: 'gitcreds', usernameVariable: 'username', passwordVariable: 'password')]){
                          sh("git push http://$username:$password@github.com/Hanna-Aliakseichykava/DevOpsTraining master")
                          sh("git push http://$username:$password@github.com/Hanna-Aliakseichykava/DevOpsTraining --tags")
                    }  
                }  
                
            }
        }

    }
}