
pipeline {

    agent {
        label ""
    }

   environment {
     VERSION = '0.0.0'

    
     LOCAL_DOCKER_REGISTRY_URL = "localhost:5000"
     
     APP_URL_1 = "http://mynode1:8080/app/"

     APP_URL_2 = "http://mynode1:8081/app/"
   }

    stages {

        stage('Clone sources') {
            steps {
                echo '..........................Clone or pull the repo..........................'
                git url: 'https://github.com/Hanna-Aliakseichykava/DevOpsTraining.git', branch: 'Module10'
            }
        }

         stage('Build docker image, publish it to docker registry, create swarm service') {
            steps {
                script {
                    
                    echo '..........................Build Chef Cookbook..........................'
                    dir ('Module10') {
                        
                        echo '..........................upload updated cookbook and environment file to chef server..........................'
                        sh "sudo cd /root/chef-repo/cookbooks"
                        sh "sudo knife cookbook upload docker_run_book"
                        sh "sudo knife cookbook list"

                        echo '..........................Start Client........................'                        
                        sh "sudo knife node run_list add mynode1 \"recipe[docker_run_book]\""
                        sh "sudo knife ssh 'name:mynode1' 'sudo chef-client --once -o docker_run_book' -x vagrant -P 'vagrant'"
                        sh "sudo knife ssh 'name:mynode1' 'sudo docker -v' -x vagrant -P 'vagrant'"

                        def versionCheckResultPort1 = sh (
                            script: "curl -X GET ${APP_URL_1} | grep ${VERSION} &>/dev/null && echo true || echo false",
                            returnStdout: true
                        ).trim()
                        println "Version Check - Port 1: [${versionCheckResultPort1}]"

                        def versionChekResultPort2 = sh (
                            script: "curl -X GET ${APP_URL_2} | grep ${VERSION} &>/dev/null && echo true || echo false",
                            returnStdout: true
                        ).trim()
                        println "Version Check - Port 2: [${versionCheckResultPort2}]"

                        if(versionCheckResultPort1 != "true" && versionChekResultPort2 != "true") {
                            error("Build failed: version check doesn't pass")
                        }

                    }
                }  
                
            }
        }


        stage('Push to the repo') {
            steps {
                script {
                    
                    sh "git config --global user.email \"aleks.anna.ur@gmail.com\""
                    sh "git config --global user.name \"Anna\""
  
                    sh "git checkout Module10"
                    sh "git commit -am \"Version is updated to ${VERSION}\""

                    withCredentials([usernamePassword(credentialsId: 'gitcreds', usernameVariable: 'username', passwordVariable: 'password')]){
                          sh("git push http://$username:$password@github.com/Hanna-Aliakseichykava/DevOpsTraining Module10")
                    } 

                    sh "git checkout master"
                    sh "git pull"
                    sh "git tag -a v${VERSION} -m \"New tag v${VERSION}\""
                    sh 'git merge Module10'

                    withCredentials([usernamePassword(credentialsId: 'gitcreds', usernameVariable: 'username', passwordVariable: 'password')]){
                          sh("git push http://$username:$password@github.com/Hanna-Aliakseichykava/DevOpsTraining master")
                          sh("git push http://$username:$password@github.com/Hanna-Aliakseichykava/DevOpsTraining --tags")
                    }  
                }  
                
            }
        }

    }
}