
pipeline {

    agent {
        label ""
    }

   environment {
     VERSION = '0.0.0'

     BASE_LOCAL_NEXUS_URL = "http://localhost:8081/nexus"
     BASE_REMOTE_NEXUS_URL = "http://192.168.0.10:8081/nexus"
     
     LOCAL_DOCKER_REGISTRY_URL = "localhost:5000"
     
     BALANCER_APP_URL = "http://192.168.0.10:8088/app/"
   }

    stages {

        stage('Clone sources') {
            steps {
                echo '..........................Clone or pull the repo..........................'
                git url: 'https://github.com/Hanna-Aliakseichykava/DevOpsTraining.git', branch: 'Module7'
            }
        }

        stage('Build war') {
            steps {
                echo '..........................Building war..........................'
                dir ('Module7/gradleSample') {
                    sh "ls"
                    sh './gradlew incrementMinorVersion'
                    sh './gradlew build'
                }
            }
        }

        stage('Upload war to Nexus') {
            steps {
                echo '..........................Uploading war to Nexus..........................'

                script {
                        
                    def basePath = "${env.WORKSPACE}/Module7/gradleSample"
                    def artifactPath = "${basePath}/build/libs/app.war"
                    println "Debug: Path app path: ${basePath}"

                    Properties props = new Properties()
                    props.load(new File("${basePath}/gradle.properties").newDataInputStream())
                    VERSION = props.getProperty('version')

                    String nexusUploadUrl = "${BASE_LOCAL_NEXUS_URL}/content/repositories/snapshots/module7/${VERSION}/app.war"
                    println "Debug: Nexus url: ${nexusUploadUrl}"

                    withCredentials([usernamePassword(credentialsId: 'nexuscreds', usernameVariable: 'username', passwordVariable: 'password')]){
                          def response = sh(script: "curl --upload-file ${artifactPath} -u $username:$password -v ${nexusUploadUrl}", returnStdout: true)
                          println "=========================Response===================\n${response}"
                    }
                    
                }

            }
        }

         stage('Build docker image, publish it to docker registry, create swarm service') {
            steps {
                script {
                    
                    echo '..........................Build docker image..........................'
                    dir ('Module7') {
                        sh "sudo docker build -t task7:${VERSION} . --build-arg WAR_VERSION=${VERSION} --build-arg REMOTE_NEXUS_URL=${BASE_REMOTE_NEXUS_URL}"
                        sh "sudo docker image tag task7:${VERSION} ${LOCAL_DOCKER_REGISTRY_URL}/task7:${VERSION}"
                        sh "sudo docker push ${LOCAL_DOCKER_REGISTRY_URL}/task7:${VERSION}"
                        
                        echo '..........................Start swarm service..........................'
                        sh "if [[ \"\$(sudo docker service ls --filter name=app-in-tomcat --quiet | wc -l)\" -eq 0 ]]; then (sudo docker service create --replicas 1 --name app-in-tomcat --publish published=8088,target=8080 task7:${VERSION}); else (sudo docker service update --image task7:${VERSION} app-in-tomcat); fi"
                        sh "sudo docker service ls"
                        sh "sudo docker service inspect --pretty app-in-tomcat-service"
                        sh "sudo docker service ps app-in-tomcat-service"

                        def versionCheckResult = sh (
                            script: "curl -s ${BALANCER_APP_URL} | grep --quiet ${VERSION}; [ \$? -eq 0 ]  && echo true || echo false",
                            returnStdout: true
                        ).trim()
                        
                        println "Version Check: [${versionCheckResult}]"
                    
                        if(versionCheckResult != "true") {
                            error("Build failed: version check doesn't pass")
                        }
                    }
                }  
                
            }
        }


        stage('Push to the repo') {
            steps {
                script {
                    
                    sh "git config --global user.email \"aleks.anna.ur@gmail.com\""
                    sh "git config --global user.name \"Anna\""
  
                    sh "git checkout Module7"
                    sh "git commit -am \"Version is updated to ${VERSION}\""

                    withCredentials([usernamePassword(credentialsId: 'gitcreds', usernameVariable: 'username', passwordVariable: 'password')]){
                          sh("git push http://$username:$password@github.com/Hanna-Aliakseichykava/DevOpsTraining Module7")
                    } 

                    sh "git checkout master"
                    sh "git pull"
                    sh "git tag -a v${VERSION} -m \"New tag v${VERSION}\""
                    sh 'git merge Module7'

                    withCredentials([usernamePassword(credentialsId: 'gitcreds', usernameVariable: 'username', passwordVariable: 'password')]){
                          sh("git push http://$username:$password@github.com/Hanna-Aliakseichykava/DevOpsTraining master")
                          sh("git push http://$username:$password@github.com/Hanna-Aliakseichykava/DevOpsTraining --tags")
                    }  
                }  
                
            }
        }

    }
}