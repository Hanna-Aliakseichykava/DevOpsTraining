
Vagrant.configure("2") do |config|

  config.vm.box = "bento/centos-7.5"


  config.vm.provider "virtualbox" do |vb|
  # Display the VirtualBox GUI when booting the machine
    vb.gui = true
    vb.memory = 1024
    vb.cpus = 4
  end

  #
  # Tomcat instances (not more that 243)
  #
  TOMCAT_COUNT = 2
  TOMCAT_NODES = Hash.new

  (1..TOMCAT_COUNT).each do |i|
    config.vm.define "tomcat#{i}" do |node|

      node.vm.hostname = "tomcat#{i}"
      # Create a private network, which allows host-only access to the machine using a specific IP.
      nodeIp = "192.168.0.#{10 + i}"
      node.vm.network "private_network", ip: nodeIp

      TOMCAT_NODES["#{node.vm.hostname}"] = nodeIp

      node.vm.provision "shell", inline: <<-SHELL

        echo "Install Tomcat #{i}"
        yum install java-1.8.0-openjdk -y
        yum install tomcat tomcat-webapps tomcat-admin-webapps -y
        systemctl enable tomcat
        
        echo 'Create web-app MyApp with index.html'
        [ ! -d "/usr/share/tomcat/webapps/MyApp" ] && mkdir /usr/share/tomcat/webapps/MyApp && echo "Folder MyApp has been created" || echo "Folder MyApp exists"
        export MY_APP_PATH=/usr/share/tomcat/webapps/MyApp/index.html

        echo 'Create or rewrite file index.html'
        > $MY_APP_PATH
        echo "<html>" >> $MY_APP_PATH
        echo "<head><title>Tomcat #{i}</title></head>" >> $MY_APP_PATH
        echo "<body style="color:green"><h1>Tomcat #{i}</h1></body>" >> $MY_APP_PATH
        echo "</html>" >> $MY_APP_PATH

        systemctl start tomcat

      SHELL

      # update hosts file
      node.vm.provision "shell", inline: <<-SHELL

        export HOSTS_FILE=/etc/hosts

        grep -q "my.loadbalancer" $HOSTS_FILE; [ $? -eq 0 ] && export HOSTS_FILE_IS_UP_TO_DATE=true || export HOSTS_FILE_IS_UP_TO_DATE=false
        echo 'Debug: HOSTS file for [#{node}] is up to date: ' $HOSTS_FILE_IS_UP_TO_DATE
  
        $HOSTS_FILE_IS_UP_TO_DATE || echo '192.168.0.10 my.loadbalancer' >> $HOSTS_FILE
        $HOSTS_FILE_IS_UP_TO_DATE || echo '192.168.0.10 my.nexusrepo' >> $HOSTS_FILE
        $HOSTS_FILE_IS_UP_TO_DATE || echo '192.168.0.10 my.jenkins' >> $HOSTS_FILE
        $HOSTS_FILE_IS_UP_TO_DATE || echo '192.168.0.10 my.influxdb' >> $HOSTS_FILE
        $HOSTS_FILE_IS_UP_TO_DATE || echo '192.168.0.10 my.logstash' >> $HOSTS_FILE
      SHELL


      # add collectd daemon
      node.vm.provision "shell", inline: <<-SHELL

        yum install epel-release -y
        yum install collectd -y

        yum install -y nmap
        yum install -y tcpdump

        export COLLECTD_CONF=/etc/collectd.conf

        grep -q "my.influxdb" $COLLECTD_CONF; [ $? -eq 0 ] && export COLLECTD_CONF_IS_UP_TO_DATE=true || export COLLECTD_CONF_IS_UP_TO_DATE=false
        echo 'Debug: collectd.conf file for [#{node}] is up to date: ' $COLLECTD_CONF_IS_UP_TO_DATE

        $COLLECTD_CONF_IS_UP_TO_DATE || echo 'BaseDir     "/var/lib/collectd"' >> $COLLECTD_CONF
        $COLLECTD_CONF_IS_UP_TO_DATE || echo 'PIDFile     "/var/run/collectd.pid"' >> $COLLECTD_CONF
        $COLLECTD_CONF_IS_UP_TO_DATE || echo 'PluginDir   "/usr/lib64/collectd"' >> $COLLECTD_CONF
        $COLLECTD_CONF_IS_UP_TO_DATE || echo 'TypesDB     "/usr/share/collectd/types.db"' >> $COLLECTD_CONF
  
        $COLLECTD_CONF_IS_UP_TO_DATE || echo 'LoadPlugin uptime' >> $COLLECTD_CONF
        $COLLECTD_CONF_IS_UP_TO_DATE || echo 'LoadPlugin network' >> $COLLECTD_CONF
        $COLLECTD_CONF_IS_UP_TO_DATE || echo '<Plugin network>' >> $COLLECTD_CONF
        $COLLECTD_CONF_IS_UP_TO_DATE || echo 'Server "my.influxdb" "25826"' >> $COLLECTD_CONF
        $COLLECTD_CONF_IS_UP_TO_DATE || echo '</Plugin>' >> $COLLECTD_CONF

        systemctl start collectd
        systemctl enable collectd

      SHELL


      # add filebeat daemon
      node.vm.provision "shell", inline: <<-SHELL

        yum install -y https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.5.0-x86_64.rpm
        
        export FILEBEAT_CONF=/etc/filebeat/filebeat.yml

        grep -q "my.logstash" $FILEBEAT_CONF; [ $? -eq 0 ] && export FILEBEAT_CONF_IS_UP_TO_DATE=true || export FILEBEAT_CONF_IS_UP_TO_DATE=false
        echo 'Debug: filebeat.yml file for [#{node}] is up to date: ' $FILEBEAT_CONF_IS_UP_TO_DATE
  
        $FILEBEAT_CONF_IS_UP_TO_DATE || echo 'output.logstash:' >> $FILEBEAT_CONF
        $FILEBEAT_CONF_IS_UP_TO_DATE || echo '  hosts: ["my.logstash:5044"]' >> $FILEBEAT_CONF

        systemctl start filebeat
        systemctl enable filebeat

      SHELL

    end
  end


  # Apache HTTPD:
  # http://192.168.0.10:80/server-status
  # http://192.168.0.10:80/jkmanager/
  # 
  # http://192.168.0.10:80/MyApp/
  # http://192.168.0.10:80/app/

  config.vm.define "myloadbalancer" do |myloadbalancer|
  
    # For elastic: increase manually after vm is created
    # myloadbalancer.vm.provider "virtualbox" do |vb|
    #    vb.memory = 262144
    # end

    myloadbalancer.vm.hostname = "myloadbalancer"
    # Create a private network, which allows host-only access to the machine using a specific IP.
    myloadbalancer.vm.network "private_network", ip: "192.168.0.10"

    # Install Apache HTTPD and open firewall port
    myloadbalancer.vm.provision "shell", inline: <<-SHELL

      echo "Debug: Install Loadbalancer"

      yum install httpd -y
      systemctl enable httpd

      yum install links -y

      systemctl start firewalld
      firewall-cmd --zone=public --add-port=80/tcp --permanent
      firewall-cmd --reload

    SHELL

    #
    # Apache HTTPD + Tomcats
    #

    joinedTomcatNodeNames = TOMCAT_NODES.keys.join(",")

    # Create /etc/httpd/conf/workers.properties with content
    myloadbalancer.vm.provision "shell", inline: <<-SHELL

      cp /vagrant/mod_jk.so /etc/httpd/modules/

      export WORKERS_FILE_PATH=/etc/httpd/conf/workers.properties
      echo 'Create or rewrite file workers.properties'

      > $WORKERS_FILE_PATH

      echo "Debug: Tomcat Nodes: #{joinedTomcatNodeNames}"

      echo "worker.list=lb, status" >> $WORKERS_FILE_PATH
      echo "worker.status.type=status" >> $WORKERS_FILE_PATH
      echo "worker.lb.type=lb" >> $WORKERS_FILE_PATH
      echo "worker.lb.balance_workers=#{joinedTomcatNodeNames}" >> $WORKERS_FILE_PATH
    SHELL

    # Configure each worker in workers.properties
    TOMCAT_NODES.each do|name,ip|

      myloadbalancer.vm.provision "shell", inline: <<-SHELL

        export WORKERS_FILE_PATH=/etc/httpd/conf/workers.properties

        echo "Debug: Worker: #{name} #{ip}"
        echo "worker.#{name}.host=#{ip}" >> $WORKERS_FILE_PATH
        echo "worker.#{name}.port=8009" >> $WORKERS_FILE_PATH
        echo "worker.#{name}.type=ajp13" >> $WORKERS_FILE_PATH
      SHELL
    end

    # Ping tomcat machines should work via DNS names
    TOMCAT_NODES.each do|name,ip|

      myloadbalancer.vm.provision "shell", inline: <<-SHELL

        export HOSTS_FILE=/etc/hosts

        grep -q "#{name}" $HOSTS_FILE; [ $? -eq 0 ] && export HOSTS_FILE_IS_UP_TO_DATE=true || export HOSTS_FILE_IS_UP_TO_DATE=false
        echo 'Debug: HOSTS file for [#{ip} #{name}] is up to date: ' $HOSTS_FILE_IS_UP_TO_DATE
  
        $HOSTS_FILE_IS_UP_TO_DATE || echo '#{ip} #{name}' >> $HOSTS_FILE
      SHELL
    end

    # Configure HOSTS
    myloadbalancer.vm.provision "shell", inline: <<-SHELL

        export HOSTS_FILE=/etc/hosts

        grep -q "my.dockerregistry" $HOSTS_FILE; [ $? -eq 0 ] && export HOSTS_FILE_IS_UP_TO_DATE=true || export HOSTS_FILE_IS_UP_TO_DATE=false
        echo 'Debug: HOSTS file is up to date: ' $HOSTS_FILE_IS_UP_TO_DATE
  
        $HOSTS_FILE_IS_UP_TO_DATE || echo '192.168.0.10 my.dockerregistry' >> $HOSTS_FILE
        $HOSTS_FILE_IS_UP_TO_DATE || echo '192.168.0.10 my.nexusrepo' >> $HOSTS_FILE
        $HOSTS_FILE_IS_UP_TO_DATE || echo '192.168.0.10 my.swarm.manager' >> $HOSTS_FILE
    SHELL

    # Edit /etc/httpd/conf/httpd.conf, 
    # Add to the end of the file
    myloadbalancer.vm.provision "shell", inline: <<-SHELL

      export HTTPD_CONF_FILE_PATH=/etc/httpd/conf/httpd.conf

      grep -q "mod_jk.so" $HTTPD_CONF_FILE_PATH; [ $? -eq 0 ] && export HTTPD_CONF_IS_UP_TO_DATE=true || export HTTPD_CONF_IS_UP_TO_DATE=false
      echo 'HTTPD conf is up to date: ' $HTTPD_CONF_IS_UP_TO_DATE

  
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'LoadModule jk_module modules/mod_jk.so' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkWorkersFile conf/workers.properties' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkShmFile /tmp/shm' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkLogFile logs/mod_jk.log' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkLogLevel info' >> $HTTPD_CONF_FILE_PATH

      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkMount /jkmanager* status' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkMount /MyApp* lb' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'JkMount /app* lb' >> $HTTPD_CONF_FILE_PATH

      $HTTPD_CONF_IS_UP_TO_DATE || echo 'ExtendedStatus on' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo '<Location /server-status>' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'SetHandler server-status' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'Order deny,allow' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo 'Allow from all' >> $HTTPD_CONF_FILE_PATH
      $HTTPD_CONF_IS_UP_TO_DATE || echo '</Location>' >> $HTTPD_CONF_FILE_PATH

    SHELL


    # Start apache load balancer
    myloadbalancer.vm.provision "shell", inline: <<-SHELL
      systemctl start httpd
    SHELL


    #
    # Nexus
    #
    # curl -I http://localhost:8081/nexus/
    # http://192.168.0.10:8081/nexus/
    # The default username is deployment/deployment123 or admin/admin123
    myloadbalancer.vm.provision "shell", inline: <<-SHELL

      echo "Debug: Install Nexus"

      yum install java-1.8.0-openjdk-devel -y
      yum install wget -y

      wget http://download.sonatype.com/nexus/oss/nexus-2.11.2-06-bundle.tar.gz
      cp nexus-2.11.2-06-bundle.tar.gz /usr/local
      cd /usr/local
      tar xvzf nexus-2.11.2-06-bundle.tar.gz

      export NEXUS_HOME=/usr/local/nexus-2.11.2-06

      cp $NEXUS_HOME/bin/nexus /etc/init.d/nexus
      chmod 755 /etc/init.d/nexus
      sed -i 's@.*NEXUS_HOME=.*$@NEXUS_HOME="/usr/local/nexus-2.11.2-06"@g' /etc/init.d/nexus
      sed -i 's@.*RUN_AS_USER=.*$@RUN_AS_USER=root@g' /etc/init.d/nexus

      cd /etc/init.d
      chkconfig --add nexus
      chkconfig --levels 345 nexus on
      service nexus start
      tail -f /usr/local/nexus/logs/wrapper.log

      firewall-cmd --zone=public --add-port=8081/tcp --permanent
      firewall-cmd --reload

    SHELL

    #
    # Jenkins
    #
    # systemctl status jenkins
    # http://192.168.0.10:8080
    # Get password: sudo vi /var/lib/jenkins/secrets/initialAdminPassword
    myloadbalancer.vm.provision "shell", inline: <<-SHELL

      echo "Debug: Install Jenkins"
 
      yum install git -y

      curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo
      rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
      yum install jenkins -y
      systemctl start jenkins
      systemctl enable jenkins

      firewall-cmd --permanent --zone=public --add-port=8080/tcp
      firewall-cmd --reload

      echo "Debug: Jenkins permissions"
      export PERM_CONF_FILE=/etc/sudoers

      grep -q "jenkins" $PERM_CONF_FILE; [ $? -eq 0 ] && export PERM_CONF_FILE_IS_UP_TO_DATE=true || export PERM_CONF_FILE_IS_UP_TO_DATE=false
      echo '/etc/sudoers conf is up to date: ' $PERM_CONF_FILE_IS_UP_TO_DATE

  
      $PERM_CONF_FILE_IS_UP_TO_DATE || echo 'jenkins ALL=(ALL) NOPASSWD: ALL' >> $PERM_CONF_FILE
    SHELL


    #
    # Docker
    #
    # Install Docker and create the foder /etc/DOCKER_DIR for convinient usage with WinSCP
    myloadbalancer.vm.provision "shell", inline: <<-SHELL

      echo "Debug: Install Docker" 
      yum install -y yum-utils
      yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      yum -y install docker-ce

      echo "Debug: Install Docker Compose"
      curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose
      chmod +x /usr/local/bin/docker-compose
      ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

      echo "Debug: Start Docker"
      systemctl start docker
      systemctl enable docker

      echo "Debug: Login Docker Hub"
      sudo docker logout
      sudo docker login --username hannaautodockerid --password hannaautodockerid

      echo "Debug: Start Docker Registry"

      echo "Debug: Configure Docker Registry"
      [ ! -d "/etc/docker" ] && mkdir /etc/docker && echo "Folder /etc/docker has been created" || echo "Folder /etc/docker exists"
      export DOCKER_REGISTRY_CONF=/etc/docker/daemon.json
      echo 'Create or rewrite the file daemon.json'
      > $DOCKER_REGISTRY_CONF
      echo '{ "insecure-registries" : ["localhost:5000" ] }' >> $DOCKER_REGISTRY_CONF

      docker run -d -p 5000:5000 --restart=always --name registry registry:2
  
      sudo systemctl daemon-reload
      sudo systemctl restart docker

      firewall-cmd --permanent --zone=public --add-port=5000/tcp
      firewall-cmd --reload
      systemctl stop firewalld

      echo "Debug: Init Swarm"

      docker swarm init --advertise-addr 192.168.0.10
      docker node ls

      echo "Debug: For convinient usage with WinSCP"
      mkdir /etc/DOCKER_DIR
      chmod -R 777 /etc/DOCKER_DIR

      echo "Debug: Increase used memory config for Elastic"
      sysctl -w vm.max_map_count=262144

    SHELL


  end

end
